# Relocate columns not containing NA
covi_data_c4 = covi_data_c4 %>%
relocate(
c('tot_cases', 'new_case', 'tot_death', 'new_death'),
.after = state)
# check column orders
covi_data_c4 %>% colnames()
# Chunk 38
# first drop columns which will not be pivoted, and then pivot
covi_data_c5 = covi_data_c4 %>%
select(.,
-c(conf_cases, prob_cases, pnew_case, conf_death, prob_death, pnew_death)
) %>%
pivot_longer(.,
cols = c('tot_cases', 'new_case', 'tot_death', 'new_death'),
names_to = 'number_type',
values_to = 'number_value'
)
# check new column
covi_data_c5 %>% distinct(., number_type)
# Chunk 39
# cleaned table of count_death.csv for model(without pivoting)
count_death_cleand_model = count_death_c6
# cleaned table of count_death.csv for visualization(with pivoting)
count_death_cleand_visual = count_death_c7_2
# cleaned table of condition_covi_death.csv
condition_covi_cleaned = condition_covi_c3
# cleaned table of covi_data.csv for model(without pivoting)
covi_data_cleaned_model = covi_data_c4
# cleaned table of covi_data.csv(with pivoting)
covi_data_cleaned_visual = covi_data_c5
# Chunk 40
write_rds(count_death_cleand_model, "./dataset/count_death_cleaned_model.rds")
write_rds(count_death_cleand_visual, "./dataset/count_death_cleaned_visual.rds")
write_rds(condition_covi_cleaned, "./dataset/condition_covi_cleaned.rds")
write_rds(covi_data_cleaned_model, "./dataset/covi_data_cleaned_model.rds")
write_rds(covi_data_cleaned_visual, "./dataset/covi_data_cleaned_visual.rds")
# Chunk 41
read_rds('./dataset/count_death_cleaned_visual.rds') %>% str()
read_rds('./dataset/covi_data_cleaned_visual.rds') %>% str()
# Chunk 1
rm(list=ls())
library(tidyverse)
library(lubridate)
count_death=read_csv('./dataset/count_death.csv')
condition_covi=read_csv('./dataset/conditon_covi.csv')
covi_data=read_csv('./dataset/covi_data.csv')
# Chunk 2
# have a look at the structure of dataset
count_death %>%
str()
# what's the character columns ?
count_death %>% select(., where(is.character))
# What values are included in column Sex. It seems that there is data value issue in this column.
count_death %>% distinct(., Sex)
# What are the columns whose name contains 'date' ?
count_death %>% select(., contains('date'))
#Are the data type of these columns Date ? Unfortunately, they are not date variable.
count_death %>%
select(., contains('date') & where(is.Date))
# what's the year information ?
count_death %>%
select(., `Date Of Death Year`) %>%
unique()
# are information for Year 2020 cover all months ? Yes all months are included for Year 2020
count_death %>%
filter(., `Date Of Death Year`==2020) %>%
distinct(., `Date Of Death Month`)
# is categorical column a factor ? No, none of the columns are factors.
count_death %>% select(., where(is.factor))
# which columns are related to COVID-19 ?
count_death %>% select(., contains('covid'))
# Chunk 3
# sum all number from column 12 to 22
sum_columns = count_death %>%
select(., 11:22) %>%
rowwise() %>%
summarise(., total=sum(c_across(everything())))
# compare the sum with column 10
sum_columns %>% head(11)
count_death[10] %>% head(11)
# Chunk 4
# sum all values from column 12 to 22
sum_columns = count_death %>%
select(., 12:22) %>%
rowwise() %>%
summarise(., total=sum(c_across(everything())))
# take subtract of AllCause and sum of 12 to 22
rss_1 = count_death$AllCause - sum_columns$total
# are all values >= 0 ? The answer is yes. Sum of 12 to 22 are always <= AllCause
(rss_1 >= 0) %>% all()
# take subtract of column 11(Natural cause) and sum of 12 to 22
rss_2 = count_death$AllCause - sum_columns$total
# are all values >= 0 ? The answer is yes. Sum of 12 to 22 are always <= AllCause
(rss_2 >= 0) %>% all()
# Chunk 5
# sum all values from column 12 to 24
sum_columns = count_death %>%
select(., 12:24) %>%
rowwise() %>%
summarise(., total=sum(c_across(everything())))
# take subtract of AllCause and sum of 12 to 24
rss_3 = count_death$AllCause - sum_columns$total
# are all values >= 0 ? The answer is false.
(rss_3 >= 0) %>% all()
# how many values in rss_3<0 ? ans is 1791645
sum(rss_3)
# take subtract of column 11(Natural cause) and sum of 12 to 24
rss_4 = count_death$NaturalCause - sum_columns$total
# are all values >= 0 ? The answer is false.
(rss_4 >= 0) %>% all()
# how many values in rss_4<0 ? ans is 1060595
sum(rss_4)
# Chunk 6
# what's the difference between these two columns ? All values in column 23 is larger than 24
count_death %>%
transmute(.,
sub=`COVID-19 (U071, Multiple Cause of Death)`- `COVID-19 (U071, Underlying Cause of Death)` ) %>%
filter(., sub<0)
# Chunk 7
# sum all values from column 12 to 23
sum_columns = count_death %>%
select(., 12:23) %>%
rowwise() %>%
summarise(., total=sum(c_across(everything())))
# take subtract of AllCause and sum of 12 to 23
rss_5 = count_death$AllCause - sum_columns$total
# are all values >= 0 ? The answer is false.
(rss_5 >= 0) %>% all()
# which is <0 ? ans is 2663
which(rss_5<0)
# take subtract of column 11(Natural cause) and sum of 12 to 23
rss_6 = count_death$AllCause - sum_columns$total
# are all values >= 0 ? The answer is false.
(rss_6 >= 0) %>% all()
# which is <0 ? ans is 2663
which(rss_6<0)
# Chunk 8
# sum all values from column 12 to 22 and 24
sum_columns = count_death %>%
select(., 12:22, 24) %>%
rowwise() %>%
summarise(., total=sum(c_across(everything())))
# take subtract of AllCause and sum of 12 to 23
rss_7 = count_death$AllCause - sum_columns$total
# are all values >= 0 ? The answer is True.
(rss_7 >= 0) %>% all()
# Chunk 9
condition_covi %>% colnames()
condition_covi %>% str()
# which columns contain numeric values ?
condition_covi %>% select(., where(is.numeric))
# is column Month all NA ?
condition_covi$Month %>% is.na() %>% all()
# display all non-NA in column Month, and find that only rows have time span of 1 month has NA value
condition_covi %>% filter(., !is.na(Month))
# what's the value for column Year for the above result ? 2020 2021 2022
condition_covi %>%
filter(., !is.na(Month)) %>%
.$Year %>% unique()
# what's the column 'By Total' ?
condition_covi %>% distinct(., Group)
# what's the column 'State'?
# Ans: There are 54 unique values. The unique values are the 50 states of USA and special regions like puerto rico and district of Columbia. There is another special which is United States, which is the sum of all regions/states.
unique_state=condition_covi %>%
distinct(., State)
condition_covi %>%
filter(., State=='United States') %>%
distinct(., Group)
# unique values of column Condition Group. There are 12 unique values.
condition_covi %>% distinct(., `Condition Group`)
# unique values of column Condition. There are 23 unique values.
condition_covi %>% distinct(., Condition)
# What's the relation between column `Condition Group` and Condition ? We can observe that one `Condition Group` may correspond to several values of Condition.
condition_covi %>% distinct(., `Condition Group`, Condition)
condition_covi %>%
filter(., `Condition Group`=='Respiratory diseases') %>%
distinct(., Condition)
# what's the unique value of column 'Age Group'
condition_covi %>% distinct(., `Age Group`)
# Chunk 10
# What's the meaning of By Total, By Year and By Month ?
condition_covi %>%
filter(., Group=='By Total') %>%
distinct(., `Start Date`, `End Date` )
condition_covi %>%
filter(., Group=='By Year') %>%
distinct(., `Start Date`, `End Date` )
condition_covi %>%
filter(., Group=='By Month') %>%
distinct(., `Start Date`, `End Date` )
# Chunk 11
# Chunk 12
# what states are included in the column 'state'
state_covi_data = covi_data$state %>%
unique() %>%
sort()
# How many states are in total ? The answer is 60.
state_covi_data %>% length()
# Chunk 13
library(lubridate)
# transform, extract date and year
covi_data1 = covi_data %>%
mutate(.,
date=mdy(submission_date),
month=month(date),
year=year(date),
day=day(date),
.before=1,
.keep='unused')
# make covi_data1 arranged by state, year, month, date,
covi_data1_1 = covi_data1 %>%
arrange(., state, year, month, day)
# Chunk 14
# how many times a state submit cases ? Take AK as an example. The answer is 1001.
covi_data1 %>%
filter(., state=='AK') %>%
arrange(., date)
# Does each state has 1001 rows ? All states have 1001 rows.
covi_data1 %>%
count(., state)
# It seems that a state submit everyday. Let's check it.The result shows every day has occurred 60 times.
covi_data1 %>% count(., date)
# Are there 60 values in Column States ? The answer is yes.
covi_data1$state %>% unique()
# Chunk 15
# are there negative values ? Choose rows with negative values and arrange by state, year, month, day
covi_data_neg=covi_data1 %>%
filter(if_any(.fns=~.<0)) %>%
arrange(., state, year, month, day)
# Chunk 16
# calculate number of NA in columns by state
covi_data_NA=
covi_data1 %>%
group_by(., state) %>%
summarise(.,
across(
where(is.numeric) & contains('_'),
function(x) sum(is.na(x)),
.names='{.col}_NA')
)
# Which column has no NA-value among all states ?
covi_data_NA %>%
select(.,
where(~ is.numeric(.x) && sum(.x) == 0))
# Whats states have 1001 NA values in any column ?
covi_data_NA %>% filter(.,
if_any(everything(), ~. == 1001 ))
# What states have less than 1001 NA values ?
covi_data_NA %>% filter(.,
if_any(everything(), ~. < 1001 ))
# Let's have a look at column 'pnew_case' and state AK. There are only 2 unique values: NA and 0.
covi_data1_1 %>%
filter(., state == 'AK') %>%
distinct(., pnew_case)
# Chunk 17
# summarize and sum by state, followed by displaying the last 10 minimum values.
covi_data1 %>%
group_by(., state) %>%
summarise(.,
across(
c(tot_cases, new_case, tot_death, new_death),
sum,
.names = "sum_{.col}")
) %>%
slice_min(., sum_tot_cases, n=10)
# Chunk 18
# drop columns using select
count_death_c1 = count_death %>%
select(., -c(AnalysisDate, `Jurisdiction of Occurrence`))
# Chunk 19
# convert data types
count_death_c2 = count_death_c1 %>%
mutate(.,
across(c(`Start Date`, `End Date`), mdy))
# check data type has been converted to date.
count_death_c2 %>% select(., contains('date') & where(is.Date))
# Chunk 20
# convert data type
count_death_c3 = count_death_c2 %>%
mutate(.,
across(c(Sex, `Race/Ethnicity`, AgeGroup), as.factor))
# check data type has been converted to factor.
count_death_c3 %>% select(., where(is.factor))
# Chunk 21
# merge old levels to new levels
count_death_c4 = count_death_c3 %>%
mutate(.,
Sex = fct_collapse(Sex,
male=c('M', 'Male'),
female=c('F', 'Female')))
# check new levels, which should only contains 'male' and 'female'
count_death_c4$Sex %>% levels()
# Chunk 22
# mutate new column 'cause_other'
count_death_c5 = count_death_c4 %>%
rowwise() %>%
mutate(., cause_other = AllCause - NaturalCause)
# check the new column after transformation
count_death_c5 %>% select(., AllCause, NaturalCause, cause_other)
# Chunk 23
# mutate new column 'percent_covi'
count_death_c5 = count_death_c5 %>%
rowwise() %>%
mutate(., percent_covi =
`COVID-19 (U071, Underlying Cause of Death)` / cause_other) %>%
ungroup()
# check the new column after transformation
count_death_c5 %>% select(., `COVID-19 (U071, Underlying Cause of Death)`,
percent_covi,
cause_other)
# Chunk 24
# rename column names
count_death_c6 = rename(count_death_c5,
year_death = `Date Of Death Year`,
month_death = `Date Of Death Month`,
date_start = `Start Date`,
date_end = `End Date`,
sex = Sex,
race = `Race/Ethnicity`,
age_group = AgeGroup ,
cause_all = AllCause,
cause_natural = NaturalCause)
# check column names
count_death_c6 %>% colnames()
# re-locate columns
count_death_c6 =  count_death_c6 %>%
relocate(.,  cause_other, .after=cause_natural) %>%
relocate(., percent_covi, .after=cause_other) %>%
relocate(., `COVID-19 (U071, Multiple Cause of Death)`, .after=last_col())
# check column order
count_death_c6 %>% colnames()
# Chunk 25
# pivot columns
count_death_c7_1 = pivot_longer(count_death_c6,
cols=matches('^cause_\\w'),
names_to='cause_type',
values_to = 'death_by_cause')
# check new columns
count_death_c7_1 %>% select(., cause_type, death_by_cause)
# Chunk 26
# pivot columns
count_death_c7_2 = pivot_longer(count_death_c7_1,
col=9:20,
names_to = 'disease_type',
values_to = 'death_by_disease')
# check new column
count_death_c7_2 %>% distinct(., disease_type)
# move column `COVID-19 (U071, Multiple Cause of Death)` to the last column
count_death_c7_2 = count_death_c7_2 %>%
relocate(., `COVID-19 (U071, Multiple Cause of Death)`, .after=last_col())
# final check column name and order
count_death_c7_2 %>% colnames()
# Chunk 27
# drop columns
condition_covi_c1 = condition_covi %>%
select(., -c(`Data As Of`, `Start Date`, `End Date`))
# check columns
condition_covi_c1 %>% colnames()
# Chunk 28
# convert date type
condition_covi_c2 = condition_covi_c1 %>%
mutate(.,
across(
where(is.numeric), as.integer),
across(
c(State, `Condition Group`, Condition, ICD10_codes, `Age Group`), as.factor))
# check data type
condition_covi_c2 %>% select(., where(is.integer))
condition_covi_c2 %>% select(., where(is.factor))
# Chunk 29
# change column names to lower-case, and replace space with underscore
condition_covi_c3 = condition_covi_c2 %>%
rename_with(.,
.fn = ~ tolower(gsub(" ", "_", .x, fixed = TRUE)),
.cols = everything())
# manually change some column names to make following analysis convinent
condition_covi_c3 = condition_covi_c3 %>%
rename(.,
covi_death=`covid-19_deaths`)
# check column names
condition_covi_c3 %>% colnames()
# Chunk 30
# drop columns
covi_data_c1 = covi_data %>%
select(., -c(created_at, consent_cases, consent_deaths))
# check columns
covi_data_c1 %>% colnames()
# Chunk 31
# string vector of all abbr. of state
abbr_all_states =  c("AL","AK", "AZ", "KS", "UT", "CO", "CT",
"DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA",
"AR", "KY", "LA", "ME", "MD", "MA", "MI", "MN",
"MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM",
"NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI",
"SC", "SD", "TN", "TX", "CA", "VT", "VA", "WA",
"WV", "WI", "WY", "DC", "NYC",
"AS", "GU", "MP", "PR", "VI", "FSM", "PW", "RMI")
# string vector of all full name of state
full_all_states = c("Alabama","Alaska", "Arizona", "Kansas",
"Utah", "Colorado", "Connecticut",
"Delaware", "Florida", "Georgia",
"Hawaii", "Idaho", "Illinois",
"Indiana", "Iowa", "Arkansas",
"Kentucky", "Louisiana", "Maine",
"Maryland", "Massachusetts", "Michigan",
"Minnesota", "Mississippi", "Missouri",
"Montana", "Nebraska", "Nevada",
"New Hampshire", "New Jersey", "New Mexico",
"New York", "North Carolina", "North Dakota",
"Ohio", "Oklahoma", "Oregon",
"Pennsylvania", "Rhode Island", "South Carolina",
"South Dakota", "Tennessee", "Texas",
"California", "Vermont", "Virginia",
"Washington", "West Virginia", "Wisconsin",
"Wyoming", "District of Columbia", "New York City",
"American Samoa", "Guam", "Northern Mariana Islands",
"Puerto Rico", "U.S. Virgin Islands",
"Micronesia", "Palau",  "Republic of Marshall Islands")
# define custom function to replace abbr. with full name
replace_abbr_fullname = function(abbr){
str1 = tolower(abbr_all_states)
str2 = full_all_states
str2[match(tolower(abbr), str1)]
}
# Chunk 32
# note that the name attributes should be removed
covi_data_c2 = covi_data_c1 %>%
mutate(.,
state = sapply(state, replace_abbr_fullname),
state = unname(state))
# Chunk 33
# if all states in full name have 1001 values, the return should have 0 row
covi_data_c2 %>%
count(., state) %>%
filter(., n != 1001)
# check if there are 60 non-NA values in column 'state'
covi_data_c2 %>%
select(., state) %>%
filter(., !is.na(state)) %>%
n_distinct()
# Chunk 34
# type conversion
covi_data_c3 = covi_data_c2 %>%
mutate(.,
state = as.factor(state),
submission_date = mdy(submission_date),
across(c(4:12), as.integer))
# check data type
covi_data_c3 %>% select(., where(is.factor))
covi_data_c3$state %>% levels()
covi_data_c3 %>% select(., where(is.Date))
covi_data_c3 %>% select(., where(is.integer))
# Chunk 35
# extract and mutate
covi_data_c4 = covi_data_c3 %>%
mutate(.,
date=submission_date,
month=month(date),
year=year(date),
day=day(date),
.before=1,
.keep='unused')
# check columns
covi_data_c4 %>% colnames()
# Chunk 36
# arrange by state, year, month, date
covi_data_c4 = covi_data_c4 %>%
arrange(., state, year, month, date )
# have a look at first 10 rows
covi_data_c4 %>% head(10)
# Chunk 37
# Relocate columns not containing NA
covi_data_c4 = covi_data_c4 %>%
relocate(
c('tot_cases', 'new_case', 'tot_death', 'new_death'),
.after = state)
# check column orders
covi_data_c4 %>% colnames()
# Chunk 38
# first drop columns which will not be pivoted, and then pivot
covi_data_c5 = covi_data_c4 %>%
select(.,
-c(conf_cases, prob_cases, pnew_case, conf_death, prob_death, pnew_death)
) %>%
pivot_longer(.,
cols = c('tot_cases', 'new_case', 'tot_death', 'new_death'),
names_to = 'number_type',
values_to = 'number_value'
)
# check new column
covi_data_c5 %>% distinct(., number_type)
# Chunk 39
# cleaned table of count_death.csv for model(without pivoting)
count_death_cleand_model = count_death_c6
# cleaned table of count_death.csv for visualization(with pivoting)
count_death_cleand_visual = count_death_c7_2
# cleaned table of condition_covi_death.csv
condition_covi_cleaned = condition_covi_c3
# cleaned table of covi_data.csv for model(without pivoting)
covi_data_cleaned_model = covi_data_c4
# cleaned table of covi_data.csv(with pivoting)
covi_data_cleaned_visual = covi_data_c5
# Chunk 40
write_rds(count_death_cleand_model, "./dataset/count_death_cleaned_model.rds")
write_rds(count_death_cleand_visual, "./dataset/count_death_cleaned_visual.rds")
write_rds(condition_covi_cleaned, "./dataset/condition_covi_cleaned.rds")
write_rds(covi_data_cleaned_model, "./dataset/covi_data_cleaned_model.rds")
write_rds(covi_data_cleaned_visual, "./dataset/covi_data_cleaned_visual.rds")
# Chunk 41
read_rds('./dataset/count_death_cleaned_visual.rds') %>% str()
read_rds('./dataset/covi_data_cleaned_visual.rds') %>% str()
